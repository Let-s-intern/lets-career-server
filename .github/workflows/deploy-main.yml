#name: Deploy to Amazon ECS CI/CD
#
#on:
#  push:
#    branches: [ "main" ]
#
#env:
#  AWS_REGION: ${{ secrets.AWS_REGION }}
#  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
#  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
#  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
#  CODE_DEPLOY_APPLICATION: ${{ secrets.CODE_DEPLOY_APPLICATION }}
#  CODE_DEPLOY_GROUP: ${{ secrets.CODE_DEPLOY_GROUP }}
#  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#  APPLICATION_SECRET_DEV: ${{ secrets.APPLICATION_SECRET_DEV }}
#  ECS_APPSPEC: appspec.yml
#  AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE: 1
#
#permissions:
#  contents: read
#
#jobs:
#
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: üçÄ Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: üçÄ Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: üçÄ Make application-secret.yml
#        run: |
#          touch ./src/main/resources/application-secret.yml
#          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml
#        env:
#          PROPERTIES_DEV: ${{ secrets.APPLICATION_SECRET }}
#
#      - name: üçÄ task-definition.json ÌååÏùºÏùÑ ÏÉùÏÑ±.
#        run: |
#          cat <<EOF > ./task-definition.json
#          ${{ secrets.ECS_TASK_DEFINITION_DEV }}
#          EOF
#
#      - name: üçÄ appspec.yml ÌååÏùºÏùÑ ÏÉùÏÑ±.
#        run: |
#          touch ./appspec.yml
#          echo "${{ secrets.APP_SPEC }}" > ./appspec.yml
#
#      - name: üçÄ Build with Gradle
#        run: ./gradlew build
#
#      - name: üçÄ Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: üçÄ Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: üçÄ Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: üçÄ Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: üçÄ Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
#          codedeploy-appspec: ${{ env.ECS_APPSPEC }}
#          codedeploy-application: ${{ env.CODE_DEPLOY_APPLICATION }}
#          codedeploy-deployment-group: ${{ env.CODE_DEPLOY_GROUP }}


name: Deploy to EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Í∏∞Î≥∏ Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout
        uses: actions/checkout@v3

      # JDK version ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradlew Permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## Make application-secret.yml
      - name: Make application-secret.yml
        run: |
          touch ./src/main/resources/application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml
        env:
          PROPERTIES_DEV: ${{ secrets.APPLICATION_SECRET }}

      # Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: üçÉ docker image build ÌõÑ docker hub Ïóê push Ìï©ÎãàÎã§.
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/blue-green .
          docker push ${{ secrets.DOCKER_USERNAME }}/blue-green

      - name: Make zip file
        run: |
          mkdir deploy
          cp ./scripts/docker-compose.yml ./deploy/
          cp ./scripts/appspec.yml ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: |
          aws s3 cp \
            --region ap-northeast-2 \
            ./spring-build.zip s3://${{secrets.BUCKET_NAME}}/prod-spring/

      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name ${{secrets.CODEDEPLOY_APP_NAME}}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{secrets.CODEDEPLOY_DG_NAME}}
          --s3-location bucket=${{secrets.BUCKET_NAME}},bundleType=zip,key=prod-spring/spring-build.zip