#name: Deploy to EC2
#
#on:
#  push:
#    branches:
#      - main
#
#permissions:
#  contents: read
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      # Í∏∞Î≥∏ Ï≤¥ÌÅ¨ÏïÑÏõÉ
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      # JDK version ÏÑ§Ï†ï
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # Gradlew Permission
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      # Gradle Caching
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      ## Make application-secret.yml
#      - name: Make application-secret.yml
#        run: |
#          touch ./src/main/resources/application-secret.yml
#          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml
#        env:
#          PROPERTIES_DEV: ${{ secrets.APPLICATION_SECRET }}
#
#      # Build with Gradle
#      - name: Build with Gradle
#        run: ./gradlew build -x test
#
#      - name: Docker meta
#        id: docker_meta
#        uses: crazy-max/ghaction-docker-meta@v1
#        with:
#          images: letsintern/letsintern-server-dev
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Docker build & push
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: ./Dockerfile
#          platforms: linux/amd64
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/letsintern-server-dev
#
#      - name: create remote directory
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          script: mkdir -p ~/srv/ubuntu/letsintern-server-dev
#
#      - name: copy source via ssh key
#        uses: burnett01/rsync-deployments@4.1
#        with:
#          switches: -avzr --delete
#          remote_path: ~/srv/ubuntu/Í∞Ä
#          remote_host: ${{ secrets.EC2_HOST }}
#          remote_user: ubuntu
#          remote_key: ${{ secrets.EC2_KEY }}
#
#      - name: executing remote ssh commands using password
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          script: |
#            sh ~/srv/ubuntu/config/scripts/deploy.sh
#            sudo docker stop $(sudo docker ps -a -q)
#            sudo docker rm $(sudo docker ps -a -q)
#            sudo docker rmi $(sudo docker images -q)
#            sudo docker-compose build --no-cache nginx
#            sudo docker-compose -f ~/srv/ubuntu/docker-compose.yml pull
#            sudo docker-compose -f ~/srv/ubuntu/docker-compose.yml up --build -d


name: Deploy to EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Í∏∞Î≥∏ Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout
        uses: actions/checkout@v3

      # JDK version ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradlew Permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## Make application-secret.yml
      - name: Make application-secret.yml
        run: |
          touch ./src/main/resources/application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml
        env:
          PROPERTIES_DEV: ${{ secrets.APPLICATION_SECRET }}

      # Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: üçÉ docker image build ÌõÑ docker hub Ïóê push Ìï©ÎãàÎã§.
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/blue-green .
          docker push ${{ secrets.DOCKER_USERNAME }}/blue-green

      - name: Make zip file
        run: |
          mkdir deploy
          cp ./scripts/docker-compose.yml ./deploy/
          cp ./scripts/appspec.yml ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: |
          aws s3 cp \
            --region ap-northeast-2 \
            ./spring-build.zip s3://${{secrets.BUCKET_NAME}}/prod-spring/
          
      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name ${{secrets.CODEDEPLOY_APP_NAME}}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{secrets.CODEDEPLOY_DG_NAME}}
          --s3-location bucket=${{secrets.BUCKET_NAME}},bundleType=zip,key=prod-spring/spring-build.zip
