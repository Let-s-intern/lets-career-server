name: Deploy to Amazon ECS CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  CODE_DEPLOY_APPLICATION: ${{ secrets.CODE_DEPLOY_APPLICATION }}
  CODE_DEPLOY_GROUP: ${{ secrets.CODE_DEPLOY_GROUP }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET }}
  ECS_APPSPEC: appspec.yml
  AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE: 1

permissions:
  contents: read

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🍀 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🍀 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🍀 Make application-secret.yml
        run: |
          touch ./src/main/resources/application-dev.yml
          echo "${{ env.APPLICATION_SECRET }}" > ./src/main/resources/application.yml

      - name: 🍀 task-definition.json 파일을 생성.
        run: |
          cat <<EOF > ./task-definition.json
          ${{ secrets.ECS_TASK_DEFINITION_DEV }}
          EOF

      - name: 🍀 appspec.yml 파일을 생성.
        run: |
          touch ./appspec.yml
          echo "${{ secrets.APP_SPEC }}" > ./appspec.yml

      - name: 🍀 Build with Gradle
        run: ./gradlew build

      - name: 🍀 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🍀 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🍀 Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🍀 Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: 🍀 Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ env.ECS_APPSPEC }}
          codedeploy-application: ${{ env.CODE_DEPLOY_APPLICATION }}
          codedeploy-deployment-group: ${{ env.CODE_DEPLOY_GROUP }}